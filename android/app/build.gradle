apply plugin: 'com.android.application'

def keystoreProductionPropertiesFile = rootProject.file("keystore-production.properties")
def keystoreStagingPropertiesFile = rootProject.file("keystore-staging.properties")
def keystoreProductionProperties = new Properties()
def keystoreStagingProperties = new Properties()

keystoreProductionProperties.load(new FileInputStream(keystoreProductionPropertiesFile))
keystoreStagingProperties.load(new FileInputStream(keystoreStagingPropertiesFile))

android {
    namespace "com.akashicpay.akashicwallet"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 5
        versionName "0.0.1-(5)"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        production {
            storeFile file(keystoreProductionProperties['STORE_FILE_PATH'])
            storePassword keystoreProductionProperties['STORE_FILE_PASSWORD']
            keyAlias keystoreProductionProperties['KEY_ALIAS']
            keyPassword keystoreProductionProperties['KEY_PASSWORD']
        }
        staging {
            storeFile file(keystoreStagingProperties['STORE_FILE_PATH'])
            storePassword keystoreStagingProperties['STORE_FILE_PASSWORD']
            keyAlias keystoreStagingProperties['KEY_ALIAS']
            keyPassword keystoreStagingProperties['KEY_PASSWORD']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "version"
    productFlavors {
        production {
            applicationId "com.akashicpay.akashicwallet"
            resValue "string", "app_name", "Akashic Wallet"
            resValue "string", "title_activity_main", "Akashic Wallet"
            resValue "string", "package_name", "com.akashicpay.akashicwallet"
            resValue "string", "custom_url_scheme", "com.akashicpay.akashicwallet"
            signingConfig signingConfigs.production
        }
        staging {
            applicationId "com.staging.akashicpay.akashicwallet"
            resValue "string", "app_name", "Akashic Wallet Staging"
            resValue "string", "title_activity_main", "Akashic Wallet Staging"
            resValue "string", "package_name", "com.staging.akashicpay.akashicwallet"
            resValue "string", "custom_url_scheme", "com.staging.akashicpay.akashicwallet"
            signingConfig signingConfigs.staging
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
